//Case Study in OOPM
//Topic:- Online Shopping Plate Form


#include <iostream>
#include <vector>
#include <string>
#include <map>

using namespace std;

// Forward declarations
class Product;
class ShoppingCart;
class User;
class UserManager;
class ProductPage;
class CartPage;
class MainPage;

// Define the Product class
class Product {
public:
    Product(std::string name, double price, std::string category)
        : name(name), price(price), category(category) {}

      string getName() const {
        return name;
    }

    double getPrice() const {
        return price;
    }

    string getCategory() const {
        return category;
    }

    void displayDetails() const {
        cout << "Product: " << name << "\tPrice: $" << price << "\tCategory: " << category << "\n";
    }

private:
    string name;
    double price;
    string category;
};

// Define the ShoppingCart class
class ShoppingCart {
public:
    // Function to add a product to the shopping cart
    void addProduct(const Product& product, int quantity) {
        cart[product.getName()] += quantity;
    }

    // Function to remove a product from the shopping cart
    void removeProduct(const string& productName, int quantity) {
        if (cart.find(productName) != cart.end()) {
            cart[productName] = max(0, cart[productName] - quantity);
        }
    }

    // Function to display the items in the shopping cart and calculate the total cost
    void displayCart() const {
        cout << "Shopping Cart:\n";
        double totalCost = 0.0;

        for (const auto& entry : cart) {
            const string& productName = entry.first;
            int quantity = entry.second;

            cout << "Product: " << productName << "\tQuantity: " << quantity << "\n";
            totalCost += getProductCost(productName, quantity);
        }

        cout << "Total Cost: $" << totalCost << "\n";
    }

private:
    map<string, int> cart; 
    
    // Mapping product name to quantity

    double getProductCost(const string& productName, int quantity) const {
        // Assuming products are retrieved from a database or other external source
        // In a real application, you may want to fetch product details from a database
        // This is a simplified example
        if (productName == "Laptop") {
            return 999.99 * quantity;
        } else if (productName == "Headphones") {
            return 79.99 * quantity;
        } else if (productName == "Mouse") {
            return 19.99 * quantity;
        } else {
            return 0.0; 
            // Product not found or price not specified
        }
    }
};

// Define the User class
class User {
public:
    User(string username, string password) : username(username), password(password) {}

    string getUsername() const {
        return username;
    }

    bool authenticate(string passwordAttempt) const {
        return password == passwordAttempt;
    }

private:
    string username;
    string password;
};

// Define the UserManager class
class UserManager {
public:
    // Function to register a new user
    void registerUser(const string& username, const string& password) {
        users.emplace_back(username, password);
    }

    // Function to find a user by username
    User* findUser(const string& username) {
        for (auto& user : users) {
            if (user.getUsername() == username) {
                return &user;
            }
        }
        return nullptr;
         // User not found
    }

private:
    vector<User> users;
};

// Define the ProductPage class
class ProductPage {
public:
    static void displayProducts(ShoppingCart& shoppingCart) {
        cout << "Available Products:\n";

        for (const auto& product : products) {
            product.displayDetails();
            int quantity;
            cout << "Enter quantity to add to the cart: ";
            cin >> quantity;
            shoppingCart.addProduct(product, quantity);
        }
    }

private:
    static vector<Product> products;
};

vector<Product> ProductPage::products = {
    {"Laptop", 999.99, "Electronics"},
    {"Headphones", 79.99, "Electronics"},
    {"Mouse", 19.99, "Electronics"},
    {"Shirt", 29.99, "Clothing"},
    {"Jeans", 49.99, "Clothing"},
    {"Backpack", 39.99, "Accessories"}
};

// Define the CartPage class
class CartPage {
public:
    static void displayCart(const ShoppingCart& shoppingCart) {
        shoppingCart.displayCart();
        cout << "1. Remove items from the cart\n";
        cout << "2. Continue to checkout\n";
    }

    static void removeFromCart(ShoppingCart& shoppingCart) {
        string productName;
        int quantity;

        cout << "Enter the product name to remove: ";
        cin >> productName;
        cout << "Enter the quantity to remove: ";
        cin >> quantity;

        shoppingCart.removeProduct(productName, quantity);
    }
};

// Define the MainPage class
class MainPage {
public:
    static void showMainMenu(UserManager& userManager) {
        string username, password;

        int choice;
        do {
            cout << "1. Register\n";
            cout << "2. Login\n";
            cout << "3. Exit\n";
            cout << "Enter your choice: ";
            cin >> choice;

            switch (choice) {
                case 1:
                    cout << "Enter a username: ";
                    cin >> username;
                    cout << "Enter a password: ";
                    cin >> password;
                    userManager.registerUser(username, password);
                    cout << "Registration successful!\n";
                    break;
                case 2:
                    cout << "Enter your username: ";
                    cin >> username;
                    cout << "Enter your password: ";
                    cin >> password;
                    loginUser(userManager, username, password);
                    break;
                case 3:
                    cout << "Exiting program...\n";
                    break;
                default:
                    cout << "Invalid choice. Please try again.\n";
            }
        } while (choice != 3);
    }

private:
    static void loginUser(UserManager& userManager, const string& username, const string& password) {
        User* user = userManager.findUser(username);
        if (user != nullptr && user->authenticate(password)) {
            cout << "Login successful!\n";
            ShoppingCart shoppingCart;
            showUserMenu(*user, shoppingCart);
        } else {
            cout << "Invalid username or password. Please try again.\n";
        }
    }

    static void showUserMenu(User& user, ShoppingCart& shoppingCart) {
        int choice;
        do {
            cout << "Welcome, " << user.getUsername() << "!\n";
            cout << "1. View Products\n";
            cout << "2. View Cart\n";
            cout << "3. Logout\n";
            cout << "Enter your choice: ";
            cin >> choice;

            switch (choice) {
                case 1:
                    ProductPage::displayProducts(shoppingCart);
                    break;
                case 2:
                    CartPage::displayCart(shoppingCart);
                    handleCartOptions(shoppingCart);
                    break;
                case 3:
                    cout << "Logging out...\n";
                    break;
                default:
                    cout << "Invalid choice. Please try again.\n";
            }
        } while (choice != 3);
    }

    static void handleCartOptions(ShoppingCart& shoppingCart) {
        int cartChoice;
        cout << "Enter your choice: ";
        cin >> cartChoice;

        switch (cartChoice) {
            case 1:
                CartPage::removeFromCart(shoppingCart);
                break;
            case 2:
                // Implement checkout logic here
                cout << "Checkout functionality not implemented in this example.\n";
                break;
            default:
                cout << "Invalid choice.\n";
        }
    }
};

int main() {
    UserManager userManager;
    MainPage::showMainMenu(userManager);

    return 0;
}
